<%= javascript_include_tag("demo/three_1.min") %>
<style type="text/css">
			body {
				background-color: #f0f0f0;
				margin: 0px;
				overflow: hidden;
			}
</style>

<div align="center">/dev/null spinning cube and camera zoom demo</div>
<script>          
    window.requestAnimFrame = (function(callback){
        return window.requestAnimationFrame ||
        window.webkitRequestAnimationFrame ||
        window.mozRequestAnimationFrame ||
        window.oRequestAnimationFrame ||
        window.msRequestAnimationFrame ||
        function(callback){
            window.setTimeout(callback, 1000 / 60);
        };
    })();
    var cnt = 0;
    function animate(lastTime, angularSpeed, three){
        // update
        var date = new Date();
        var time = date.getTime();
        var timeDiff = time - lastTime;
        var angleChange = angularSpeed * timeDiff * 2 * Math.PI / 1000;
        three.cube.rotation.y += angleChange;
        three.cube.rotation.x += angleChange;

        if (three.camera.position.z >= 600)
            cnt -= 1;
        else
            cnt += 1;

        three.camera.position.z += cnt;
        

        lastTime = time;

        // render
        three.renderer.render(three.scene, three.camera);
 
        // request new frame
        requestAnimFrame(function(){
            animate(lastTime, angularSpeed, three);
        });
    }
 
    window.onload = function(){
        var angularSpeed = 0.2; // revolutions per second
        var lastTime = 0;
 
        var renderer = new THREE.WebGLRenderer({antialias:true});
        renderer.setSize(window.innerWidth, window.innerHeight);
        document.body.appendChild(renderer.domElement);
 
        // camera
        var camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 1000);
        camera.position.z = 700;
 
        // scene
        var scene = new THREE.Scene();
 
        // cube
        var colors = [0x0000ff, 0x00ff00, 0xff0000, 0xffffff, 0x00ff00, 0xff00ff];
        var materials = [];
 
        for (var n = 0; n < 6; n++) {
            materials.push([new THREE.MeshBasicMaterial({
                color: colors[n]
            })]);
        }
 
        var cube = new THREE.Mesh(new THREE.CubeGeometry(100, 100, 100, 1, 1, 1, materials), new THREE.MeshFaceMaterial());
        

        cube.overdraw = true;
        scene.add(cube);   



        // create wrapper object that contains three.js objects
        var three = {
            renderer: renderer,
            camera: camera,
            scene: scene,
            cube: cube
        };
 
        animate(lastTime, angularSpeed, three);
    };

function createLabel(text, x, y, z, size, color, backGroundColor, backgroundMargin) {
					if(!backgroundMargin)
						backgroundMargin = 50;

					var canvas = document.createElement("canvas");

					var context = canvas.getContext("2d");
					context.font = size + "pt Arial";

					var textWidth = context.measureText(text).width;

					canvas.width = textWidth + backgroundMargin;
					canvas.height = size + backgroundMargin;
					context = canvas.getContext("2d");
					context.font = size + "pt Arial";

					if(backGroundColor) {
						context.fillStyle = backGroundColor;
						context.fillRect(canvas.width / 2 - textWidth / 2 - backgroundMargin / 2, canvas.height / 2 - size / 2 - +backgroundMargin / 2, textWidth + backgroundMargin, size + backgroundMargin);
					}

					context.textAlign = "center";
					context.textBaseline = "middle";
					context.fillStyle = color;
					context.fillText(text, canvas.width / 2, canvas.height / 2);

					// context.strokeStyle = "black";
					// context.strokeRect(0, 0, canvas.width, canvas.height);

					var texture = new THREE.Texture(canvas);
					texture.needsUpdate = true;

					var material = new THREE.MeshBasicMaterial({
						map : texture
					});

					var mesh = new THREE.Mesh(new THREE.PlaneGeometry(canvas.width, canvas.height), material);
					// mesh.overdraw = true;
					mesh.doubleSided = true;
					mesh.position.x = x - canvas.width;
					mesh.position.y = y - canvas.height;
					mesh.position.z = z;

					return mesh;
				}
</script>
