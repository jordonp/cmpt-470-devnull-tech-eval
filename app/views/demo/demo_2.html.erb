<%= javascript_include_tag("demo/three_2.min") %>
<%= javascript_include_tag("demo/helvetiker_regular.typeface") %>
<%= javascript_include_tag("demo/Detector") %>
<%= javascript_include_tag("demo/Stats") %>

		<style>
			body {
				background:#000;
				color:#fff;
				font-weight: bold;
			}

			#info {
				position: absolute;
				color: #ffffff;
				padding: 5px;
				font-family: Monospace;
				font-size: 13px;
				text-align: center;
				z-index:100;
			}

			a { color:red }

		</style>
		<div id="info">
			<a href="http://github.com/mrdoob/three.js" target="_blank">three.js</a> - level-of-details WebGL example
		</div>

		<script>

			if ( ! Detector.webgl ) Detector.addGetWebGLMessage();

			var container, stats;

			var camera, scene, renderer;

			var geometry, objects;

			var mouseX = 0, mouseY = 0;

			var windowHalfX = window.innerWidth / 2;
			var windowHalfY = window.innerHeight / 2;

			document.addEventListener( 'mousemove', onDocumentMouseMove, false );

			init();
			animate();

			function init() {

				container = document.createElement( 'div' );
				document.body.appendChild( container );

				camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 1, 10000 );
				camera.position.z = 1000;

				scene = new THREE.Scene();
				scene.fog = new THREE.Fog( 0x000000, 0, 15000 );

				var light = new THREE.PointLight( 0xff2200 );
				light.position.set( 0, 0, 0 );
				scene.add( light );

				var light = new THREE.DirectionalLight( 0xffffff );
				light.position.set( 0, 0, 1 ).normalize();
				scene.add( light );

				var material = new THREE.MeshLambertMaterial( { color: 0xCC0000, wireframe: true } );

				var geometry = [

					[ new THREE.SphereGeometry( 100, 64, 32 ), 300 ],
					[ new THREE.SphereGeometry( 100, 32, 16 ), 1000 ],
					[ new THREE.SphereGeometry( 100, 16, 8 ), 2000 ],
					[ new THREE.SphereGeometry( 100, 8, 4 ), 10000 ]

				];

				var i, j, mesh, lod;

				for ( j = 0; j < 1000; j ++ ) {

					lod = new THREE.LOD();

					for ( i = 0; i < geometry.length; i ++ ) {

						mesh = new THREE.Mesh( geometry[ i ][ 0 ], material );
						mesh.scale.set( 1.5, 1.5, 1.5 );
						mesh.updateMatrix();
						mesh.matrixAutoUpdate = false;
						lod.addLevel( mesh, geometry[ i ][ 1 ] );

					}

					lod.position.x = 10000 * ( 0.5 - Math.random() );
					lod.position.y =  7500 * ( 0.5 - Math.random() );
					lod.position.z = 10000 * ( 0.5 - Math.random() );
					lod.updateMatrix();
					lod.matrixAutoUpdate = false;
					scene.add( lod );

				}
	
				//text
				geometry = new THREE.TextGeometry( "/dev/null", { size: 75, height: 75, curveSegments: 6, font: "helvetiker", weight: "normal", style: "normal", bevelThickness: 2, bevelSize: 1.5, bevelSegments: 3, bevelEnabled: true });
				material = new THREE.MeshBasicMaterial( { color: 0xff0000, wireframe: false } );

				mesh = new THREE.Mesh( geometry, material );
				scene.add( mesh );
				//text

				renderer = new THREE.WebGLRenderer( { clearColor: 0x000000, clearAlpha: 1 } );
				renderer.setSize( window.innerWidth, window.innerHeight );

				renderer.sortObjects = false;
				renderer.autoUpdateScene = false;

				container.appendChild( renderer.domElement );


				window.addEventListener( 'resize', onWindowResize, false );

			}

			function onWindowResize() {

				windowHalfX = window.innerWidth / 2;
				windowHalfY = window.innerHeight / 2;

				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();

				renderer.setSize( window.innerWidth, window.innerHeight );

			}

			function onDocumentMouseMove(event) {

				mouseX = ( event.clientX - windowHalfX ) * 10;
				mouseY = ( event.clientY - windowHalfY ) * 10;

			}

			function animate() {

				requestAnimationFrame( animate );
				render();

			}

			function render() {

				camera.position.x += ( mouseX - camera.position.x ) * .005;
				camera.position.y += ( - mouseY - camera.position.y ) * .01;

				camera.lookAt( scene.position );

				scene.updateMatrixWorld();
				THREE.SceneUtils.traverseHierarchy( scene, function ( node ) { if ( node instanceof THREE.LOD ) node.update( camera ) } );

				renderer.render( scene, camera );

			}

		</script>

