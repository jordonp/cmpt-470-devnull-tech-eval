<%= javascript_include_tag("tdl/base") %>
<%= javascript_include_tag("tdl/string") %>
<%= javascript_include_tag("tdl/log") %>
<%= javascript_include_tag("tdl/misc") %>
<%= javascript_include_tag("tdl/webgl") %>
<%= javascript_include_tag("tdl/buffers") %>
<%= javascript_include_tag("tdl/fast") %>
<%= javascript_include_tag("tdl/programs") %>
<%= javascript_include_tag("tdl/models") %>
<%= javascript_include_tag("tdl/math") %>
<%= javascript_include_tag("tdl/textures") %>
<%= javascript_include_tag("tdl/primitives") %>
<%= javascript_include_tag("renderer") %>
<%= javascript_include_tag("test") %>
</div>
</div>
<canvas id="canvas"></canvas>

<div class="container">
<!-- Scripts go here -->
<!-- Shaders -->
<script id="vertex-shader" type="x-shader/x-vertex">
	attribute vec3 position;
	attribute vec3 normal;
	attribute vec2 texCoord;

	uniform mat4 transform;
	uniform mat4 view;
	uniform mat4 projection;
	uniform mat4 transformInv;
	uniform vec3 color;

	varying vec3 v_normal;
	varying vec3 v_position;
	varying vec2 v_texCoord;
	varying vec3 v_color;

	void main() {
		v_texCoord = texCoord;
		v_normal = normalize(mat3(transformInv) * normal);
    	v_position = vec3(transform * vec4(position, 1.0));
    	v_color = color;

		gl_Position = projection * view * transform * vec4(position, 1);
	}
</script>
<script id="fragment-shader" type="x-shader/x-fragment">
	precision mediump float;

	uniform sampler2D diffuseSampler;

	varying vec3 v_normal;
	varying vec3 v_position;
	varying vec2 v_texCoord;
	varying vec3 v_color;
	
	struct lightSource
	{
	    vec4 position;
	    vec4 diffuse;
	};

	lightSource light0 = lightSource(
	         vec4(4.0, 2.0, 4.0, 0.0),
	         vec4(1.0, 1.0, 1.0, 1.0)
	         );

	struct material
	{
	    vec4 diffuse;
	};

	void main(void) {
		material mymaterial = material(texture2D(diffuseSampler, v_texCoord) * vec4(v_color, 1.0));
	    vec3 normalDirection = normalize(v_normal);
	    vec3 lightDirection = normalize(vec3(light0.position));
	    vec3 diffuseReflection
	    = vec3(light0.diffuse) * vec3(mymaterial.diffuse)
	    * max(0.0, dot(normalDirection, lightDirection));
	    
	    gl_FragColor = vec4(diffuseReflection, 1.0);
	    
	}
</script>